// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ourgeo
double ourgeo(double a1, double a2, double b1, double zstar, int niter);
RcppExport SEXP _invgamstochvol_ourgeo(SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP zstarSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type zstar(zstarSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(ourgeo(a1, a2, b1, zstar, niter));
    return rcpp_result_gen;
END_RCPP
}
// lik_clo
Rcpp::List lik_clo(arma::mat Res, double b2, double n, double rho, int NIT, int niter, int nproc, int nproc2);
RcppExport SEXP _invgamstochvol_lik_clo(SEXP ResSEXP, SEXP b2SEXP, SEXP nSEXP, SEXP rhoSEXP, SEXP NITSEXP, SEXP niterSEXP, SEXP nprocSEXP, SEXP nproc2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Res(ResSEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type NIT(NITSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type nproc(nprocSEXP);
    Rcpp::traits::input_parameter< int >::type nproc2(nproc2SEXP);
    rcpp_result_gen = Rcpp::wrap(lik_clo(Res, b2, n, rho, NIT, niter, nproc, nproc2));
    return rcpp_result_gen;
END_RCPP
}
// DrawK0
arma::vec DrawK0(arma::mat AllSt, arma::mat allctil, arma::mat alogfac, arma::mat alogfac2, arma::mat alfac, double n, double rho, double b2, int nproc2);
RcppExport SEXP _invgamstochvol_DrawK0(SEXP AllStSEXP, SEXP allctilSEXP, SEXP alogfacSEXP, SEXP alogfac2SEXP, SEXP alfacSEXP, SEXP nSEXP, SEXP rhoSEXP, SEXP b2SEXP, SEXP nproc2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type AllSt(AllStSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allctil(allctilSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alogfac(alogfacSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alogfac2(alogfac2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alfac(alfacSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< int >::type nproc2(nproc2SEXP);
    rcpp_result_gen = Rcpp::wrap(DrawK0(AllSt, allctil, alogfac, alogfac2, alfac, n, rho, b2, nproc2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_invgamstochvol_ourgeo", (DL_FUNC) &_invgamstochvol_ourgeo, 5},
    {"_invgamstochvol_lik_clo", (DL_FUNC) &_invgamstochvol_lik_clo, 8},
    {"_invgamstochvol_DrawK0", (DL_FUNC) &_invgamstochvol_DrawK0, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_invgamstochvol(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
